class RegisterView(View):
	def get(self, request):
		# GET 请求中RegisterForm()没有参数
		register_form = RegisterForm()
		<
		form.py
			class RegisterForm(forms.Form)
			email = forms.EmailField(required=True)
			password = forms.CharField(required=True)
			#自定义返回错误消息
			captcha = CaptchaField(error_messages={'invalid':验证码错误})

		>
		return render(request, "register.html", {'register_form': register_form})

		def post(self, request):
			# POST请求中RegisterForm有一个参数(request.POST)
			register_form = RegisterForm(request.POST)
			if register_form.is_valid():
				# 从前台读数据
				user_name = request.POST.get("email", "")
				if UserProfile.objects.filter(email=user_name):
                	return render(request, "register.html", {'msg': "用户名已经存在"})
            	else:
					password = request.POST.get("password", "")
					# 实例化一个UserProfile对象
					user_profile = UserProfile()
					# 存数据
					user_profile.is_active = False
					user_profile.username = user_name
					user_profile.email = user_name
					# 使用django.contrib.auth.hashers import make_password
					user_profile.password = make_password(password)
					#存入数据库
					user_profile.save()

					#向邮箱中发送激活邮件
					send_register_mail(user_profile.email, 'register')

					<
					send_email.py:
						def send_register_mail(email, send_type="register")
							#实例化一个EmailVerifyRecord()
							email_verify_record = EmailVerifyRecord()
							#生成一个16位的随机字符串
							code = generate_random_string(16)

							<
								def generate_random_string(randomlength)
									string = ''
									chars = 'qwertyuioplkjhgfdsazxcvbnmQWERTYUIOPKLJHGFDSAZXCVBNM1234567890'
									length = len(chars) - 1
									for i in range(0, randomlength)
										string += chars[Random().randint(0,length)]
									return str
							>

							#赋值
							email_record.code = code
							email_record.email = email
							email_record.send_type = send_type
							# 存入数据库
							email_record.save()

							if send_type == "register"：
								email_title = "慕学网在线"
								email_body = "请点击下面链接激活账号"
								# 调用django.core.mail import send_mail 返回TRUE/FALSE
								send_status = send_mail(email_title, email_body, EMAIL_FROM, [email])


					# 配置setting.py文件
					setting.py:
						EMAIL_HOST = "smtp.163.com"
						EMAIL_PORT = "25"
						EMAIL_HOST_USER = "15007138899@163.com"
						EMAIL_HOST_PASSWORD = "CC960225"
						EMAIL_USE_TLS = False
						EMAIL_FROM = "15007138899@163.com"

					# 配置urls.py文件
					urls.py:
						url(r'^active/(?P<active_code>.*)/$', UserActiveView.as_view(), name="user_active")
					>

class UserActiveView(View):
	def get(self, request, active_code):
		# 从URL中提取active_code
		all_records = EmailVerfyRecord.objects.filter(code=active_code)
		if all_records:
			for record in all_records:
				user = UserProfile.objects.get(email=record.email)
				# 修改账户状态
				user.is_active = True
				#存入数据库
				user.save()
		return render(request, "login.html")
